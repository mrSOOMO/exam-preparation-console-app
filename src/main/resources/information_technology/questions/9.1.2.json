{
  "questions": [
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Що таке абстракція в об'єктно-орієнтованому програмуванні?",
      "options": [
        "Процес приховування деталей реалізації класу від зовнішнього світу",
        "Процес створення нових екземплярів класу",
        "Процес знищення об'єктів",
        "Процес виділення загальних властивостей і поведінки для створення абстрактних класів"
      ],
      "correctOption": "Процес виділення загальних властивостей і поведінки для створення абстрактних класів"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Що таке інкапсуляція в об'єктно-орієнтованому програмуванні?",
      "options": [
        "Процес приховування деталей реалізації класу від зовнішнього світу",
        "Процес створення нових екземплярів класу",
        "Процес знищення об'єктів",
        "Процес виділення загальних властивостей і поведінки для створення абстрактних класів"
      ],
      "correctOption": "Процес приховування деталей реалізації класу від зовнішнього світу"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Що таке спадкування в об'єктно-орієнтованому програмуванні?",
      "options": [
        "Процес створення нового класу на основі існуючого класу",
        "Процес створення нових екземплярів класу",
        "Процес знищення об'єктів",
        "Процес виклику методів класу"
      ],
      "correctOption": "Процес створення нового класу на основі існуючого класу"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Що таке поліморфізм в об'єктно-орієнтованому програмуванні?",
      "options": [
        "Здатність об'єктів різних класів реагувати на однакові методи",
        "Процес створення нових екземплярів класу",
        "Процес знищення об'єктів",
        "Процес виклику методів класу"
      ],
      "correctOption": "Здатність об'єктів різних класів реагувати на однакові методи"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Який з наведених прикладів найкраще ілюструє абстракцію?",
      "options": [
        "Створення нового класу на основі існуючого",
        "Приховування деталей реалізації методів класу",
        "Виділення загальних властивостей для створення базового класу",
        "Здатність методів з однаковими іменами виконувати різні дії в залежності від класу"
      ],
      "correctOption": "Виділення загальних властивостей для створення базового класу"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Який з наведених прикладів найкраще ілюструє інкапсуляцію?",
      "options": [
        "Створення нового класу на основі існуючого",
        "Приховування деталей реалізації методів класу",
        "Виділення загальних властивостей для створення базового класу",
        "Здатність методів з однаковими іменами виконувати різні дії в залежності від класу"
      ],
      "correctOption": "Приховування деталей реалізації методів класу"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Який з наведених прикладів найкраще ілюструє спадкування?",
      "options": [
        "Створення нового класу на основі існуючого",
        "Приховування деталей реалізації методів класу",
        "Виділення загальних властивостей для створення базового класу",
        "Здатність методів з однаковими іменами виконувати різні дії в залежності від класу"
      ],
      "correctOption": "Створення нового класу на основі існуючого"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Який з наведених прикладів найкраще ілюструє поліморфізм?",
      "options": [
        "Створення нового класу на основі існуючого",
        "Приховування деталей реалізації методів класу",
        "Виділення загальних властивостей для створення базового класу",
        "Здатність методів з однаковими іменами виконувати різні дії в залежності від класу"
      ],
      "correctOption": "Здатність методів з однаковими іменами виконувати різні дії в залежності від класу"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Як поліморфізм підвищує гнучкість коду?",
      "options": [
        "Дозволяє створювати класи на основі існуючих",
        "Дозволяє об'єктам різних класів взаємодіяти через спільний інтерфейс",
        "Приховує деталі реалізації від користувача",
        "Дозволяє виділяти загальні властивості для створення абстрактних класів"
      ],
      "correctOption": "Дозволяє об'єктам різних класів взаємодіяти через спільний інтерфейс"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 2,
      "question": "Чому важлива інкапсуляція в об'єктно-орієнтованому програмуванні?",
      "options": [
        "Забезпечує зменшення зв'язності між компонентами програми",
        "Дозволяє об'єктам різних класів взаємодіяти через спільний інтерфейс",
        "Дозволяє створювати класи на основі існуючих",
        "Дозволяє виділяти загальні властивості для створення абстрактних класів"
      ],
      "correctOption": "Забезпечує зменшення зв'язності між компонентами програми"
    }
  ]
}
