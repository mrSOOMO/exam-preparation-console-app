{
  "questions": [
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Що таке процедурне програмування?",
      "options": [
        "Підхід до програмування, який базується на об'єктах і їх взаємодії",
        "Підхід до програмування, який базується на послідовності інструкцій або процедур",
        "Підхід до програмування, який використовує логічні вирази для управління програмним потоком",
        "Підхід до програмування, який використовує події для управління програмним потоком"
      ],
      "correctOption": "Підхід до програмування, який базується на послідовності інструкцій або процедур"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Що таке об'єктно-орієнтоване програмування?",
      "options": [
        "Підхід до програмування, який базується на послідовності інструкцій або процедур",
        "Підхід до програмування, який використовує логічні вирази для управління програмним потоком",
        "Підхід до програмування, який базується на об'єктах і їх взаємодії",
        "Підхід до програмування, який використовує події для управління програмним потоком"
      ],
      "correctOption": "Підхід до програмування, який базується на об'єктах і їх взаємодії"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Яка основна відмінність між процедурним і об'єктно-орієнтованим програмуванням?",
      "options": [
        "Процедурне програмування використовує послідовності інструкцій, а об'єктно-орієнтоване - об'єкти",
        "Процедурне програмування використовує об'єкти, а об'єктно-орієнтоване - послідовності інструкцій",
        "Процедурне програмування використовує події, а об'єктно-орієнтоване - логічні вирази",
        "Процедурне програмування використовує логічні вирази, а об'єктно-орієнтоване - події"
      ],
      "correctOption": "Процедурне програмування використовує послідовності інструкцій, а об'єктно-орієнтоване - об'єкти"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Що таке метод у контексті об'єктно-орієнтованого програмування?",
      "options": [
        "Послідовність інструкцій для виконання завдання",
        "Об'єкт, який виконує певну функцію",
        "Функція або процедура, яка є частиною класу і визначає поведінку об'єкта",
        "Змінна, яка зберігає дані"
      ],
      "correctOption": "Функція або процедура, яка є частиною класу і визначає поведінку об'єкта"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Що таке процедура у контексті процедурного програмування?",
      "options": [
        "Об'єкт, який виконує певну функцію",
        "Послідовність інструкцій для виконання завдання",
        "Функція або процедура, яка є частиною класу і визначає поведінку об'єкта",
        "Змінна, яка зберігає дані"
      ],
      "correctOption": "Послідовність інструкцій для виконання завдання"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Які основні переваги об'єктно-орієнтованого програмування перед процедурним?",
      "options": [
        "Модульність, повторне використання коду, легкість у підтримці",
        "Простота, легкість у розумінні, швидкість виконання",
        "Мінімізація використання пам'яті, швидкість компіляції",
        "Легкість у налагодженні, зрозумілість коду, простота реалізації"
      ],
      "correctOption": "Модульність, повторне використання коду, легкість у підтримці"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Які основні переваги процедурного програмування перед об'єктно-орієнтованим?",
      "options": [
        "Простота, легкість у розумінні, швидкість виконання",
        "Модульність, повторне використання коду, легкість у підтримці",
        "Мінімізація використання пам'яті, швидкість компіляції",
        "Легкість у налагодженні, зрозумілість коду, простота реалізації"
      ],
      "correctOption": "Простота, легкість у розумінні, швидкість виконання"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Що таке наслідування в об'єктно-орієнтованому програмуванні?",
      "options": [
        "Процес створення нових об'єктів на основі існуючих",
        "Процес створення нових класів на основі існуючих класів",
        "Процес виклику методів класу",
        "Процес знищення об'єктів"
      ],
      "correctOption": "Процес створення нових класів на основі існуючих класів"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Яка роль інкапсуляції в об'єктно-орієнтованому програмуванні?",
      "options": [
        "Забезпечує спадкування властивостей класу",
        "Захищає дані від зовнішнього доступу і приховує деталі реалізації",
        "Забезпечує поліморфізм методів",
        "Забезпечує зв'язок між класами"
      ],
      "correctOption": "Захищає дані від зовнішнього доступу і приховує деталі реалізації"
    },
    {
      "section": 9,
      "subsection": 1,
      "subsubsection": 4,
      "question": "Яка роль абстракції в об'єктно-орієнтованому програмуванні?",
      "options": [
        "Приховує деталі реалізації і показує тільки необхідні характеристики",
        "Забезпечує спадкування властивостей класу",
        "Забезпечує поліморфізм методів",
        "Забезпечує зв'язок між класами"
      ],
      "correctOption": "Приховує деталі реалізації і показує тільки необхідні характеристики"
    }
  ]
}
